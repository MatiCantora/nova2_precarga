<%@ Page Language="VB" AutoEventWireup="false" Inherits="nvFW.nvPages.nvPageFW" %>
<%@ Import namespace="nvFW" %>
<%
    Dim accion As String = nvUtiles.obtenerValor({"accion","a"}, "")
    Dim criterio As String = nvUtiles.obtenerValor("criterio", "")

    Dim XML As System.Xml.XmlDocument
    Dim strXML As String = ""
    Dim st As New ADODB.Stream
    Dim Err As New tError

    Dim logTrack As String = nvLog.getNewLogTrack()
    Dim Stopwatch As System.Diagnostics.Stopwatch = System.Diagnostics.Stopwatch.StartNew()

    Select Case accion.ToLower
        Case "sac_identidad"
            Dim nro_vendedor As Integer
            Dim nro_banco As Integer
            Dim CDA As Integer
            Try
                XML = New System.Xml.XmlDocument
                XML.LoadXml(criterio)
                criterio = XML.SelectSingleNode("criterio/nro_docu").InnerText
                nro_vendedor = XML.SelectSingleNode("criterio/nro_vendedor").InnerText
                nro_banco = XML.SelectSingleNode("criterio/nro_banco").InnerText
                CDA = nvXMLUtiles.getNodeText(XML, "criterio/CDA")
            Catch ex As Exception
            End Try
            strXML = nvFW.servicios.nvNOSIS.SAC_identidad(criterio, nro_vendedor, nro_banco, CDA)


        Case "sac_get_token"
            Try
                'Stop
                XML = New System.Xml.XmlDocument
                XML.LoadXml(criterio)
                Dim cda As Integer = XML.SelectSingleNode("criterio/cda").InnerText
                strXML = nvFW.servicios.nvNOSIS.SAC_get_token(cda:=cda)
            Catch ex As Exception

            End Try

        Case "sac_deshabilitar"
            Try

                XML = New System.Xml.XmlDocument
                XML.LoadXml(criterio)
                Dim id_consulta As Integer = XML.SelectSingleNode("criterio/id_consulta").InnerText
                strXML = nvFW.servicios.nvNOSIS.SAC_deshabilitar(id_consulta)
            Catch ex As Exception

            End Try

        Case "sac_informe"

            Dim nro_vendedor As Integer
            Dim nro_banco As Integer
            Dim CDA As Integer
            Dim cuit As String
            Dim tipo_informe As String
            Try

                XML = New System.Xml.XmlDocument
                XML.LoadXml(criterio)
                cuit = nvFW.nvXMLUtiles.getNodeText(XML, "criterio/cuit", 0)
                nro_vendedor = nvFW.nvXMLUtiles.getNodeText(XML, "criterio/nro_vendedor", 0)
                nro_banco = nvFW.nvXMLUtiles.getNodeText(XML, "criterio/nro_banco", 0)
                CDA = nvFW.nvXMLUtiles.getNodeText(XML, "criterio/CDA", 0)
                tipo_informe = nvFW.nvXMLUtiles.getNodeText(XML, "criterio/tipo_informe", "sac_informe")

                If (tipo_informe = "sac_informe") Then
                    strXML = nvFW.servicios.nvNOSIS.SAC_informe(cuit, nro_vendedor, nro_banco, CDA, logTrack)
                Else
                    strXML = nvFW.servicios.nvNOSIS.SAC_informe_variable(cuit, nro_vendedor, nro_banco, CDA:=CDA, logTrack:=logTrack, actualizarFuentes:=True)
                End If

            Catch ex As Exception

            End Try

        Case "sac_val_fuentes"
            Try

                Dim nro_banco As String = ""
                Dim nro_entidad As String = ""
                Dim CDA As String = ""
                Dim cuit As String = ""
                Err.params("respuesta") = ""

                XML = New System.Xml.XmlDocument
                XML.LoadXml(criterio)

                cuit = XML.SelectSingleNode("criterio/cuit").InnerText
                CDA = XML.SelectSingleNode("criterio/CDA").InnerText

                Dim documento As String = nvUtiles.obtenerValor("cuit", "")
                Dim url As String = nvUtiles.obtenerValor("url", "")

                strXML = nvFW.servicios.nvNOSIS.SAC_get_token(CDA)

                XML = New System.Xml.XmlDocument
                XML.LoadXml(strXML)

                url = XML.SelectSingleNode("resultado/url").InnerText

                ' Crear instancia de NOSIS fuentes; setar URL y TimeOUT
                Dim nvNosisFuentes As New nvFW.servicios.tnvNosisFuentes
                nvNosisFuentes.URL = url
                nvNosisFuentes.timeOut = 20

                Dim respuesta = nvNosisFuentes.ActualizarFuentesNosis(cuit)
                Err.numError = 0
                Err.titulo = ""
                Err.mensaje = ""

                If (respuesta <> 1) Then
                    Err.numError = 99
                    Err.titulo = "Error al actualizar las fuentes externas."
                    Err.mensaje = "Intente Nuevamente."
                End If
                Err.params("respuesta") = respuesta

            Catch ex As Exception
                Err.parse_error_script(ex)
                Err.titulo = "Error al actualizar las fuentes externas"
                Err.mensaje = "Salida por excepcion"
            End Try

            strXML = Err.get_error_xml()

    End Select

    nvXMLUtiles.responseXML(Response, strXML)
    Stopwatch.Stop()
    Dim ts As TimeSpan = Stopwatch.Elapsed
    nvLog.addEvent("nosis_getXML", logTrack & ";;" & ts.TotalMilliseconds & ";" & accion & ";" & criterio)
    'nvLog.addEvent("rd_getXML", logTrack & ";;" & ts.TotalMilliseconds & ";" & accion & ";" & criterio)
    Response.End()

    'Response.Expires = -1
    'Response.ContentType = "text/xml"
    'Response.Charset = "ISO-8859-1" '"UTF-8"
    'strXML = "<?xml version='1.0' encoding='ISO-8859-1'?>" + strXML
    'Dim buffer() As Byte = Encoding.GetEncoding("iso-8859-1").GetBytes(strXML)
    ''Response.Write(strXML)
    'Response.BinaryWrite(buffer)
    'Response.Flush()

%>