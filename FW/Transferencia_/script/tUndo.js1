function tUndo(options) {
    this.list = [];
    this.index = -1;

    this.add = tUndo_add;
    this.undo = tUndo_undo;
    this.redo = tUndo_redo;
    this.reset = tUndo_reset;

    this.onRedo = null;
    this.onUndo = null;

    var __construct = function(t_undo, options) {
        if (!options) {
            options = {};
        }
        t_undo.container = options.container === undefined ? $($(document)) : options.container;

        t_undo.onUndo = options.onUndo === undefined ? function() {
        } : options.onUndo;
        t_undo.onRedo = options.onRedo === undefined ? function() {
        } : options.onRedo;

        if (options.container !== undefined) {
            t_undo.container.setAttribute('tabindex', 9999999);
            Event.observe(t_undo.container, "click", function(event) {
                t_undo.container.focus();
            });
        }

        var ctrlDown = false;
        var ctrlKey = 17, zKey = 90, yKey = 89;
        Event.observe(t_undo.container, "keydown", function(event) {
            if (event.keyCode == ctrlKey) {
                ctrlDown = true;
            }
        });
        Event.observe(t_undo.container, "keyup", function(event) {
            if (event.keyCode == ctrlKey) {
                ctrlDown = false;
            }
        });
        Event.observe(t_undo.container, "keydown", function(event) {
            if (ctrlDown) {
                if (event.keyCode == zKey) {
                    t_undo.undo();
                }
                if (event.keyCode == yKey) {
                    t_undo.redo();
                }
            }
        });
    }(this, options);
}
function tUndo_add(obj) {
    console.log('undo_add') 

    if(this.list[this.index] == undefined || this.list[this.index] != obj) {
        if (this.index < (this.list.length - 1)) {
            this.list = this.list.slice(0, this.index + 1);
        }
        
        this.list.push(obj);
        this.index = this.list.length - 1;
        this.temp = null;
        return true;
    }
    return false;
}
function tUndo_undo() {
    var state = false;
    if (this.index > 0) {
        state = this.list[--this.index];
        this.onUndo(state, this.index);
    } else {
    }
    return state;
}
function tUndo_redo() {
    var state = false;
    if (this.index < (this.list.length - 1)) {
        state = this.list[++this.index];
        this.onRedo(state, this.index);
    }
    return state;
}
function tUndo_reset() {
    this.list = [this.list[this.list.length - 1]];
    this.index = 0;
}